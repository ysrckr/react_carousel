{"version":3,"sources":["components/Carousel/Carousel.tsx","components/Container/Container.tsx","components/Form/Form.tsx","components/Input/Input.tsx","utils/toCamelCase.ts","components/CheckBox/CheckBox.tsx","App.tsx","index.tsx"],"names":["Carousel","images","step","frameSize","itemWidth","animationDuration","infinite","useState","transformSize","setTransformSize","counter","setCounter","imageStyle","width","itemStyle","transform","transition","listStyle","className","style","map","image","idx","src","alt","String","type","onClick","prev","length","Math","ceil","Container","children","Form","Input","label","option","changeHandler","name","replace","word","index","toLowerCase","toUpperCase","htmlFor","value","onChange","CheckBox","checked","App","state","handleInputChange","event","target","setState","Number","prevState","this","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.1b677c24.chunk.js","sourcesContent":["/* eslint-disable no-console */\n/* eslint-disable @typescript-eslint/no-unused-vars */\nimport { FC, useState } from 'react';\nimport './Carousel.scss';\n\nimport type { State as CarouselProps } from '../../App';\n\nexport const Carousel: FC<CarouselProps> = ({\n  images,\n  step,\n  frameSize,\n  itemWidth,\n  animationDuration,\n  infinite,\n}) => {\n  const [transformSize, setTransformSize] = useState(0);\n  const [counter, setCounter] = useState(0);\n\n  const imageStyle = {\n    width: `${itemWidth}px`,\n  };\n\n  const itemStyle = {\n    width: `${itemWidth}px`,\n    transform: `translateX(-${transformSize}px)`,\n    transition: `transform ${animationDuration}s ease-in-out`,\n  };\n\n  const listStyle = {\n    width: `${(itemWidth * frameSize)}px`,\n  };\n\n  const handleNext = () => {\n    const length = Math.ceil(images.length / (frameSize * step));\n\n    if (infinite\n      && counter === length) {\n      setTransformSize(0);\n      setCounter(0);\n    } else {\n      setTransformSize((prev) => prev + itemWidth * step);\n      setCounter((prev) => prev + 1);\n    }\n  };\n\n  const handlePrev = () => {\n    if (infinite && counter === 0) {\n      setTransformSize((frameSize * itemWidth * step) - itemWidth * step);\n    } else {\n      setTransformSize((prev) => prev - itemWidth * step);\n    }\n  };\n\n  return (\n    <div className=\"Carousel\">\n      <ul className=\"Carousel__list\" style={listStyle}>\n        {images.map((image, idx) => (\n          <li\n            className=\"Carousel__item\"\n            style={itemStyle}\n            key={image}\n          >\n            <img\n              src={image}\n              alt={String(idx + 1)}\n              className=\"Carousel__image\"\n              style={imageStyle}\n            />\n          </li>\n        ))}\n      </ul>\n\n      <div className=\"Carousel__controls\">\n        <button\n          type=\"button\"\n          onClick={handlePrev}\n          className=\"Carousel__button Carousel__button--prev\"\n        >\n          Prev\n        </button>\n\n        <button\n          type=\"button\"\n          data-cy=\"next\"\n          onClick={handleNext}\n          className=\"Carousel__button Carousel__button--next\"\n        >\n          Next\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default Carousel;\n","import { FC } from 'react';\n\nimport './Container.scss';\n\nexport const Container: FC = ({ children }) => (\n  <div className=\"Container\">{children}</div>\n);\n","import { FC } from 'react';\n\nimport './Form.scss';\n\nexport const Form: FC = ({ children }) => (\n  <form className=\"Form\">{children}</form>\n);\n","import { ChangeEvent, FC } from 'react';\nimport toCamelCase from '../../utils/toCamelCase';\n\nimport './Input.scss';\n\ntype Props = {\n  label: string;\n  option: number;\n  changeHandler: (event: ChangeEvent<HTMLInputElement>) => void;\n};\n\nexport const Input: FC<Props> = ({ label, option, changeHandler }) => {\n  const name = toCamelCase(label);\n\n  return (\n    <label className=\"Input__label\" htmlFor={label}>\n      {label}\n      <input\n        type=\"number\"\n        value={option}\n        onChange={changeHandler}\n        name={name}\n      />\n    </label>\n  );\n};\n","export default function toCamelCase(str: string): string {\n  return str\n    .replace(/(?:^\\w|[A-Z]|\\b\\w)/g, (word, index) => {\n      return index === 0 ? word.toLowerCase() : word.toUpperCase();\n    })\n    .replace(/\\s+/g, '');\n}\n","import { FC, ChangeEvent } from 'react';\n\nimport './CheckBox.scss';\n\ntype Props = {\n  infinite: boolean;\n  changeHandler: (event: ChangeEvent<HTMLInputElement>) => void;\n};\n\nexport const CheckBox: FC<Props> = ({ infinite, changeHandler }) => {\n  return (\n    <label htmlFor=\"checkbox\">\n      {'Infinite: '}\n      <input\n        type=\"checkbox\"\n        className=\"CheckBox\"\n        name=\"checkbox\"\n        checked={infinite}\n        onChange={changeHandler}\n      />\n    </label>\n  );\n};\n","import { ChangeEvent, Component } from 'react';\nimport './App.scss';\nimport { Carousel } from './components/Carousel';\nimport { Container } from './components/Container';\nimport { Form } from './components/Form';\nimport { Input } from './components/Input';\nimport { CheckBox } from './components/CheckBox';\n\nexport interface State {\n  images: string[];\n  step: number;\n  frameSize: number;\n  itemWidth: number;\n  animationDuration: number;\n  infinite: boolean;\n}\n\ntype InputFields = Exclude<keyof State, 'images' | 'infinite'>;\n\nclass App extends Component<{}, State> {\n  state = {\n    images: [\n      './img/1.png',\n      './img/2.png',\n      './img/3.png',\n      './img/4.png',\n      './img/5.png',\n      './img/6.png',\n      './img/7.png',\n      './img/8.png',\n      './img/9.png',\n      './img/10.png',\n    ],\n    step: 3,\n    frameSize: 3,\n    itemWidth: 130,\n    animationDuration: 1,\n    infinite: false,\n  };\n\n  handleInputChange = (event: ChangeEvent<HTMLInputElement>) => {\n    const { name, value } = event.target;\n\n    if (!name) {\n      return;\n    }\n\n    if (name !== 'checkbox') {\n      this.setState({ [name]: Number(value) } as Pick<State, InputFields>);\n    }\n\n    if (name === 'checkbox') {\n      this.setState((prevState) => ({\n        infinite: !prevState.infinite,\n      }));\n    }\n  };\n\n  render() {\n    const {\n      images,\n      step,\n      frameSize,\n      itemWidth,\n      animationDuration,\n      infinite,\n    } = this.state;\n\n    return (\n      <div className=\"App\">\n        <h1 data-cy=\"title\" className=\"App__title\">\n          {`Carousel with ${images.length} images`}\n        </h1>\n\n        <Container>\n          <Carousel\n            images={images}\n            step={step}\n            frameSize={frameSize}\n            itemWidth={itemWidth}\n            animationDuration={animationDuration}\n            infinite={infinite}\n          />\n        </Container>\n\n        <Form>\n          <Input\n            label=\"Step\"\n            option={step}\n            changeHandler={this.handleInputChange}\n          />\n\n          <Input\n            label=\"Frame size\"\n            option={frameSize}\n            changeHandler={this.handleInputChange}\n          />\n\n          <Input\n            label=\"Item width\"\n            option={itemWidth}\n            changeHandler={this.handleInputChange}\n          />\n\n          <Input\n            label=\"Animation duration\"\n            option={animationDuration}\n            changeHandler={this.handleInputChange}\n          />\n\n          <CheckBox\n            infinite={infinite}\n            changeHandler={this.handleInputChange}\n          />\n        </Form>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}